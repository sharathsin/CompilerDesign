type->int
arraySizeList -> EPSILON
memDec1 -> arraySizeList ';'
memDec->type 'id' memDec1
type->float
arraySizeList -> EPSILON
memDec1 -> arraySizeList ';'
memDec->type 'id' memDec1
type->float
fParams -> Epsilon 
arraySizeList -> EPSILON
funMemb2 -> 'id' arraySizeList ';'
funcMemb -> 'float' funMemb2
num-> 'numfloat'
funMemb1 -> indiceList ListTail '=' expr ';'
funcMemb -> 'id' funMemb1
funcMemb->return(expr) ;
f2->epsilon
f2 -> funcMemb f2
f2 -> funcMemb f2
f2 -> funcMemb f2
funcBody -> '{' f2 '}'
 memDec1 -> '(' fParams ')' funcBody ';'
memDec->type 'id' memDec1
type->float
fParams -> Epsilon 
arraySizeList -> EPSILON
funMemb2 -> 'id' arraySizeList ';'
funcMemb -> 'float' funMemb2
num-> 'numfloat'
funMemb1 -> indiceList ListTail '=' expr ';'
funcMemb -> 'id' funMemb1
funcMemb->return(expr) ;
f2->epsilon
f2 -> funcMemb f2
f2 -> funcMemb f2
f2 -> funcMemb f2
funcBody -> '{' f2 '}'
 memDec1 -> '(' fParams ')' funcBody ';'
memDec->type 'id' memDec1
memDecList-> epsilon
memDecList -> memDec memDecList 
memDecList -> memDec memDecList 
memDecList -> memDec memDecList 
memDecList -> memDec memDecList 
classDecl -> 'class' 'id' '{' memDecList '}'';'
classDeclList->epsilon
classDeclList->classDecl classDeclList
arraySize -> '[' 'int' ']'
arraySizeList -> EPSILON
arraySizeList -> arraySize arraySizeList
funMemb2 -> 'id' arraySizeList ';'
funcMemb -> 'int' funMemb2
arraySizeList -> EPSILON
funMemb2 -> 'id' arraySizeList ';'
funcMemb -> 'int' funMemb2
arraySizeList -> EPSILON
funMemb2 -> 'id' arraySizeList ';'
funcMemb -> 'int' funMemb2
arraySizeList -> EPSILON
funMemb2 -> 'id' arraySizeList ';'
funcMemb -> 'int' funMemb2
arraySizeList -> EPSILON
funMemb2 -> 'id' arraySizeList ';'
funMemb1 -> funMemb2
funcMemb -> 'id' funMemb1
num-> 'numInt'
funMemb1 -> indiceList ListTail '=' expr ';'
funcMemb -> 'id' funMemb1
type->int
num-> 'numInt'
relOp -> <>
num-> 'numInt'
addOP-> +
num-> 'numInt'
statement -> variable '=' expr ';'
statementList -> EPSILON
statementList -> statement statementList
funcMemb->for(type id =expr;arithexpr relOp arithExpr; variable = expr) statBlock  ;
f2->epsilon
f2 -> funcMemb f2
f2 -> funcMemb f2
f2 -> funcMemb f2
f2 -> funcMemb f2
f2 -> funcMemb f2
f2 -> funcMemb f2
f2 -> funcMemb f2
funcBody -> '{' f2 '}'
type->float
fParams -> Epsilon 
funcHead -> type 'id' '(' fParams ')'
arraySizeList -> EPSILON
funMemb2 -> 'id' arraySizeList ';'
funcMemb -> 'float' funMemb2
funcMemb->return(expr) ;
f2->epsilon
f2 -> funcMemb f2
f2 -> funcMemb f2
funcBody -> '{' f2 '}'
funcDef -> funcHead funcBody ';'
type->float
fParams -> Epsilon 
funcHead -> type 'id' '(' fParams ')'
arraySizeList -> EPSILON
funMemb2 -> 'id' arraySizeList ';'
funcMemb -> 'float' funMemb2
funcMemb->return(expr) ;
f2->epsilon
f2 -> funcMemb f2
f2 -> funcMemb f2
funcBody -> '{' f2 '}'
funcDef -> funcHead funcBody ';'
f1->epsilon 
f1 -> funcDef f1
