//class declared after program
program { 
 int sample[100]; 
 int idx; 
 int maxValue; 
 int minValue; 
 Utility utility; 
 Utility arrayUtility[2][3][6][7]; 
 for(int t = 0; t<=100 ; t = t + 1) 
 { 
 get(sample[t]); 
 sample[t] = (sample[t] * randomize()); 
 }; 
 maxValue = utility.findMax(sample); 
 minValue = utility.findMin(sample); 
 utility. var1[4][1][0][0][0][0][0] = 10; //no error
  utility. var1[4][1][0][0][0][0][0]= utility. var1[4][1][0][0][0][0][0](f);//error
 arrayUtility[1][1][1][1].var1[4][1][0][0][0][0][0] = 2; 
 put(maxValue); 
 put(minValue); 
 int y; //error cannot +
}; 
float randomize() 
{ 
 float value; 
 value = 100 * (2 + 3.0 / 7.0006); 
 value = 1.05 + ((2.04 * 2.47) - 3.0) + 7.0006 ; 
 return (value); 
}; class Utility //class cannot be declared after program 
{ 
 int var1[4][5][7][8][9][1][int];//type ambiguity is checked 
 float var2; 
 int findMax(int array[100]) 
 { 
 int maxValue; 
 int idx; 
 maxValue = array[100]; 
 for( ; idx = 0; idx = idx - 1 ) //no intialisation and assign operator is used in condition
 { 
 if(array[idx] > maxValue) then { 
 maxValue = array[idx]; 
 }else{}; 
 }; 
 return (maxValue); 
 }; 
 int findMin(int array[100]) 
 { 
 int minValue; 
 int idx; 
 minValue = ;//error 
 for( int idx = 1; idx <= 99; idx = ( idx ) + 1) 
 { 
 if(array[idx] = maxValue) then { //assign operator is used in condition
 maxValue = array[idx]; 
 }else{}; 
 }; 
 return (minValue); 
 }; 
}; 